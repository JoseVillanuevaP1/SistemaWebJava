package vista;

import conexion.Conexion;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import static java.awt.image.ImageObserver.WIDTH;
import java.util.ArrayList;
import java.sql.*;
import javax.swing.Icon;
import javax.swing.ImageIcon;

public class InterGraficaProductos extends javax.swing.JInternalFrame {

    ArrayList<Integer> listaCantidad = new ArrayList<>();
    ArrayList<String> listaFechas = new ArrayList<>();
    int cantidadResultados = 0;
    String[] vector_fechaVenta;
    int[] vector_estatus_cantidad;

    //constructor
    public InterGraficaProductos() {
        initComponents();
        this.setSize(new Dimension(550, 600));
        this.setTitle("Historial de Productos vendidos");
        this.MetodoContador();
        vector_fechaVenta = new String[cantidadResultados];
        vector_estatus_cantidad = new int[cantidadResultados];
        this.MetodoAlmacenaDatos();

        //insertar imagen en wallpaper
        ImageIcon wallpaper = new ImageIcon("src/img/fondo3.jpg");
        Icon icono = new ImageIcon(wallpaper.getImage().getScaledInstance(800, 600, WIDTH));
        jLabel_wallpaper.setIcon(icono);
        this.repaint();

    }

    //metodo para calcular la cantidad de resultados a Graficar
    private int MetodoContador() {
        try {

            Connection cn = Conexion.conectar();
            PreparedStatement pst = cn.prepareStatement("select p.nombre , sum(d.cantidad) as cantidad "
                    + "from tb_detalle_venta as d, tb_cabecera_venta as c, tb_producto as p "
                    + "where d.idCabeceraVenta = c.idCabeceraVenta and d.idProducto = p.idProducto and fechaVenta between '" + InterGrafica2.fecha_inicio + "' and '" + InterGrafica2.fecha_fin + "' "
                    + "group by d.idProducto ORDER BY cantidad DESC;;");

            ResultSet rs = pst.executeQuery();
            while (rs.next()) {
                cantidadResultados++;
            }
            cn.close();

        } catch (SQLException e) {
            System.out.println("Error en, : " + e);
        }

        return cantidadResultados;
    }

    //metodo para almacenar en las listas los datos a graficar
    private void MetodoAlmacenaDatos() {
        try {

            Connection cn = Conexion.conectar();
            PreparedStatement pst = cn.prepareStatement("select p.nombre , sum(d.cantidad) as cantidad "
                    + "from tb_detalle_venta as d, tb_cabecera_venta as c, tb_producto as p "
                    + "where d.idCabeceraVenta = c.idCabeceraVenta and d.idProducto = p.idProducto and fechaVenta between '" + InterGrafica2.fecha_inicio + "' and '" + InterGrafica2.fecha_fin + "' "
                    + "group by d.idProducto ORDER BY cantidad DESC;;");

            ResultSet rs = pst.executeQuery();
            int contador = 0;
            while (rs.next()) {

                vector_fechaVenta[contador] = rs.getString("nombre");
                listaFechas.add(vector_fechaVenta[contador]);
                vector_estatus_cantidad[contador] = rs.getInt("cantidad");
                listaCantidad.add(vector_estatus_cantidad[contador]);
                contador++;

            }
            cn.close();

        } catch (SQLException e) {
            System.out.println("Error en, : " + e);
        }
    }

    //Metodo para determinar cual es el dia de Mayor cantidad de Ventas
    public int MetodoMeyorVenta(ArrayList<Integer> listaCantidad) {

        int mayor = 0;
        for (int i = 0; i < listaCantidad.size(); i++) {
            if (listaCantidad.get(i) > mayor) {

                mayor = listaCantidad.get(i);

            }
        }

        return mayor;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel_wallpaper = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setResizable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Historial de Productos mas vendidos");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 20, 430, -1));
        getContentPane().add(jLabel_wallpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 540, 570));

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel_wallpaper;
    // End of variables declaration//GEN-END:variables

    @Override
    //Metodo que dibuja graficas
    public void paint(Graphics g) {
        super.paint(g);

        int mayorVenta = this.MetodoMeyorVenta(listaCantidad);
        int largo_nuevoIngreso = 0;
        int parametro1 = 133;
        int parametroFecha = 118;
        int parametro3 = 100;

        for (int i = 0; i < listaCantidad.size(); i++) {
            largo_nuevoIngreso = listaCantidad.get(i) * 400 / mayorVenta;

            switch (i) {
                case 0 ->
                    g.setColor(new Color(140, 0, 75));  //morado
                case 1 ->
                    g.setColor(new Color(200, 0, 0)); //rojo
                case 2 ->
                    g.setColor(new Color(7, 249, 150)); //negro
                case 3 ->
                    g.setColor(new Color(255, 255, 255)); //verde claro
                case 4 ->
                    g.setColor(new Color(0, 85, 0)); //verde
                case 5 ->
                    g.setColor(new Color(0, 0, 255)); //morado
                case 6 ->
                    g.setColor(new Color(255, 127, 0)); //naranja
                default ->
                    g.setColor(new Color(17, 251, 216)); //celeste
            }

            g.fillRect(100, parametro3, largo_nuevoIngreso, 40);
            g.drawString(listaFechas.get(i), 20, parametroFecha);
            g.drawString("Cantidad: " + listaCantidad.get(i), 20, parametro1);
            parametro1 += 50;
            parametroFecha += 50;
            parametro3 += 50;

        }

    }

}
